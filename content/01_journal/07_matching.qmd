---
title: "Matching and Subclassification"
---

# Assignment

------------------------------------------------------------------------

> Loading the data set membership

```{r}
df_membership  <- readRDS("../../Causal_Data_Science_Data/membership.rds")
df_membership
```

### Task 1:

```{r}
#| warning: false
library(tidyverse)
library(dagitty)
library(ggdag)
library(ggplot2)

# Define the DAG
dag <- 'dag {
  card  [exposure,pos="0.1,0.5"]
  avg_purch [outcome,pos="0.5,0.5"]
  pre_avg_purch [pos="0.3,1"]
  pre_avg_purch -> card
  pre_avg_purch -> avg_purch
  card -> avg_purch
}'
ggdag_status(dag) +
theme_dag() +
theme(plot.background = element_rect(fill = "lightblue"))
```
### Task 2:

```{r}
model_naive <- lm(avg_purch ~ card, data = df_membership)
summary(model_naive)
```
### Task 3:

> (Coarsened) Exact Matching.

#### Without specifying coarsening

```{r}
library(MatchIt)

cem <- matchit(card ~ sex + age + pre_avg_purch, 
               data = df_membership, 
               method = "cem", 
               estimand = 'ATE')
# Covariate balance
summary(cem)
```

```{r}
# Use matched data
df_cem <- match.data(cem)
model_cem <- lm(avg_purch ~ card, data = df_cem, weights = weights)
summary(model_cem)
```

> Custom coarsening

```{r}
cutpoints <- list(age = seq(26, 60, 16), 
                  pre_avg_purch = seq(3, 250, 55))
cem_coars <- matchit(card ~ sex + age + pre_avg_purch, 
                     data = df_membership, 
                     method = "cem", 
                     estimand = 'ATE', 
                     cutpoints = cutpoints)
summary(cem_coars)
```

```{r}
df_cem_coars <- match.data(cem_coars)

model_cem_coars <- lm(avg_purch ~ card, 
                      data = df_cem, 
                      weights = weights)
summary(model_cem_coars)
```

> Nearest-Neighbor Matching.

```{r}
nn <- matchit(card ~ age + sex + pre_avg_purch, 
              data = df_membership, method = "nearest", 
              distance = "mahalanobis", replace = T)
summary(nn)
```

```{r}
df_nn <- match.data(nn)

model_nn <- lm(avg_purch ~ card, 
               data = df_nn, 
               weights = weights)
summary(model_nn)
```

> Inverse Probability Weighting.

```{r}
model_prop <- glm(card ~ age + sex + pre_avg_purch, 
                  data = df_membership, 
                  family = binomial(link = "logit"))
summary(model_prop)
```

```{r}
df_aug <- df_membership %>% mutate(propensity = predict(model_prop, type = "response"))

df_ipw <- df_aug %>% mutate(ipw = (card / propensity) + ((1 - card) / (1 - propensity)))

df_ipw %>% 
  select(card, age, sex, pre_avg_purch, propensity, ipw)
```

```{r}
model_ipw <- lm(avg_purch ~ card, 
                data = df_ipw, 
                weights = ipw)
summary(model_ipw)
```