---
title: "Regression Discontinuity"
---

# Assignment

------------------------------------------------------------------------

> Loading the data set coupon

```{r}
#| warning: false
library(dplyr)

df_coupon <- readRDS("../../Causal_Data_Science_Data/coupon.rds")

# Define cut-off
c0 <- 60

head(df_coupon)
```

### Task 1:

#### Sensitive change in result by running the analysis with half the bandwidth

```{r}
# Specify bandwidth
bw <- (c0 + c(-2.5, 2.5))

# Subsets below and above threshold in specified bandwidth
df_bw_below <- df_coupon %>% filter(days_since_last >= bw[1] & days_since_last < c0)
df_bw_above <- df_coupon %>% filter(days_since_last >= c0 & days_since_last <= bw[2])

df_bw <- bind_rows(df_bw_above, df_bw_below)
dim(df_bw)
```

> LATE

```{r}
model_bw_below <- lm(purchase_after ~ days_since_last, df_bw_below)
model_bw_above <- lm(purchase_after ~ days_since_last, df_bw_above)

y0 <- predict(model_bw_below, tibble(days_since_last = c0))
y1 <- predict(model_bw_above, tibble(days_since_last = c0))

late <- y1 - y0
sprintf("LATE: %.2f", late)
```

> Plot

```{r}
library(ggplot2)

# Minimum and maximum for y-axis limits
min_y <- min(df_bw$purchase_after)
max_y <- max(df_bw$purchase_after)

# Add lines for vertical distance and change limits of x-axis.
dep_var_bw <- 
  ggplot(df_bw, aes(x = days_since_last, y = purchase_after, color = coupon)) +
  geom_vline(xintercept = c0, linewidth = 2) +
  geom_point(alpha = 0.4, size = 1) +
  geom_smooth(data = df_bw_below, method = "lm", se = F, linewidth = 2) +
  geom_smooth(data = df_bw_above, method = "lm", se = F, linewidth = 2) +
  geom_segment(aes(x = c0, xend = bw[2], y = y0, yend = y0),
             linetype = "dotted") +
  geom_segment(aes(x = bw[1], xend = c0, y = y1, yend = y1),
               linetype = "dotted") +
  annotate("text", x = c0+2, y = mean(c(y1, y0)-2),
           label = sprintf("Difference: %.2f", (y1 - y0)),
           fontface = 2) +
  scale_y_continuous(limits = c(min_y, max_y)) + 
  scale_color_discrete(labels = c("No coupon", "Coupon")) +
  xlab("Days since last purchase") +
  ylab("Purchase after coupon assignment") +
  theme(legend.title = element_blank())
dep_var_bw
```

#### Sensitive change in result by running the analysis with double the bandwidth

```{r}
# Specify bandwidth
bw <- (c0 + c(-10, 10))

# Subsets below and above threshold in specified bandwidth
df_bw_below <- df_coupon %>% filter(days_since_last >= bw[1] & days_since_last < c0)
df_bw_above <- df_coupon %>% filter(days_since_last >= c0 & days_since_last <= bw[2])

df_bw <- bind_rows(df_bw_above, df_bw_below)
dim(df_bw)
```

> LATE

```{r}
model_bw_below <- lm(purchase_after ~ days_since_last, df_bw_below)
model_bw_above <- lm(purchase_after ~ days_since_last, df_bw_above)

y0 <- predict(model_bw_below, tibble(days_since_last = c0))
y1 <- predict(model_bw_above, tibble(days_since_last = c0))

late <- y1 - y0
sprintf("LATE: %.2f", late)
```

> Plot

```{r}
# Minimum and maximum for y-axis limits
min_y <- min(df_bw$purchase_after)
max_y <- max(df_bw$purchase_after)

# Add lines for vertical distance and change limits of x-axis.
dep_var_bw <- 
  ggplot(df_bw, aes(x = days_since_last, y = purchase_after, color = coupon)) +
  geom_vline(xintercept = c0, linewidth = 2) +
  geom_point(alpha = 0.4, size = 1) +
  geom_smooth(data = df_bw_below, method = "lm", se = F, linewidth = 2) +
  geom_smooth(data = df_bw_above, method = "lm", se = F, linewidth = 2) +
  geom_segment(aes(x = c0, xend = bw[2], y = y0, yend = y0),
             linetype = "dotted") +
  geom_segment(aes(x = bw[1], xend = c0, y = y1, yend = y1),
               linetype = "dotted") +
  annotate("text", x = c0+2, y = mean(c(y1, y0)-2),
           label = sprintf("Difference: %.2f", (y1 - y0)),
           fontface = 2) +
  scale_y_continuous(limits = c(min_y, max_y)) + 
  scale_color_discrete(labels = c("No coupon", "Coupon")) +
  xlab("Days since last purchase") +
  ylab("Purchase after coupon assignment") +
  theme(legend.title = element_blank())
dep_var_bw
```

Here are the calculated Local Average Treatment Effect (LATE) values for different bandwidths:

For a bandwidth of 2.5 (half), the LATE is 7.36.
For a bandwidth of 5, the LATE is 7.99.
For a bandwidth of 10 (double), the LATE is 9.51.

::: callout-note
This indicates LATE values are sensitive to the bandwidth chosen. The LATE is higher when the bandwidth is doubled and slightly lower when the bandwidth is halved. A larger bandwidth captures a broader range of the data, possibly introducing more variation. A smaller bandwidth might not capture enough of the treatment's effect, leading to a smaller estimate.

:::

### Task 2:

> Loading the data set shipping

```{r}
df_shipping  <- readRDS("../../Causal_Data_Science_Data/shipping.rds")
head(df_shipping)
```

> Plot

```{r}
df_shipping <- df_shipping %>%
  mutate(shipping_type = ifelse(purchase_amount > 30, "Free Shipping", "Shipping Charges"))

ggplot(df_shipping, aes(x = purchase_amount, y = shipping_type, color = shipping_type)) +
  geom_vline(xintercept = 30, color = palette()[2], linetype = "dashed") +
  geom_point(alpha = 0.2, position = position_jitter()) +
  guides(scale = "none") +
  scale_y_discrete(labels = c("Free Shipping", "Shipping Charges"))+
  scale_color_discrete(labels = c("Free Shipping", "Shipping Charges")) +
  xlab("Purchase Amount") +
  ylab("") +
  theme(legend.position = "none")
```

> Argument

* The presence of the dashed line at 30€ clearly defines a cut-off point. This aligns with the provided information about the free shipping offer for purchases with a total amount exceeding 30€.

* The argument is supported by the clear visualization of the 30€ cut-off and the distribution of purchases on either side. The plot effectively illustrates how purchase_amount can serve as a running variable to distinguish between purchases eligible for free shipping and those incurring shipping charges.